{"version":3,"sources":["components/trend/index.tsx","pages/index/index.module.css","components/world-trend/index.tsx","pages/index/index.tsx","utils/fetch.ts","hooks/data.ts"],"names":["Trend","height","React","useState","width","setWidth","hasRendered","setHasRendered","dailyData","useDailyData","data","useEffect","chart","Chart","container","autoFit","map","number","totalConfirmed","reportDate","type","deaths","total","scale","range","sync","min","nice","tooltip","showCrosshairs","shared","line","position","shape","color","val","render","bounds","onResize","contentRect","measureRef","ref","id","module","exports","WorldTrend","confirmedData","useConfirmData","x","y","coordinate","reflect","legend","axis","ds","DataSet","dv","createView","source","mapData","transform","projection","as","bgView","rows","polygon","style","fill","stroke","lineWidth","fillOpacity","userData","callback","obj","projectedCoord","geoProjectPosition","long","lat","confirmed","pointView","point","size","state","active","interaction","getDeltaSign","delta","Index","recoveryData","useOverallData","countryData","useConfirmedDataByCountry","currentDateData","length","prevDateData","confirmedDelta","deathsDelta","use","tag","phone","desktop","className","classnames","styles","card","activeCard","start","end","recovered","value","duration","separator","confirmCard","deathCard","recoverdCard","charts","trendCard","slice","country","iso3","iso2","span","key","to","countryRow","src","alt","BASE_URL","url","a","fetch","credentials","res","json","fetcher","config","useSWR","suspense","rest","normalizedData","useMemo","toPairs","groupBy","list","sum"],"mappings":"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","file":"static/js/9.ae3c4b5d.chunk.js","sourcesContent":["import React from 'react';\nimport Measure from 'react-measure';\nimport { Chart } from '@antv/g2';\nimport { useDailyData } from '../../hooks/data';\n\nconst container = 'trend-chart';\n\nconst Trend: React.FC<{ height?: number }> = ({ height }) => {\n  const [width, setWidth] = React.useState<number>();\n  const [hasRendered, setHasRendered] = React.useState(false);\n  const { data: dailyData } = useDailyData();\n  React.useEffect(() => {\n    if (!dailyData || !width || hasRendered) {\n      return;\n    }\n    const chart = new Chart({\n      container,\n      autoFit: true,\n      height: height ?? (width / 971) * 800,\n    });\n    setHasRendered(true);\n    chart.data([\n      ...dailyData.map(({ totalConfirmed, reportDate }: any) => ({\n        number: totalConfirmed, reportDate, type: 'total confirmed',\n      })),\n      ...dailyData.map(({ reportDate, deaths }: any) => ({\n        reportDate, number: deaths.total, type: 'total deaths',\n      })),\n    ]);\n    chart.scale({\n      reportDate: {\n        range: [0, 1],\n        sync: true,\n      },\n      totalConfirmed: {\n        min: 0,\n        nice: true,\n        sync: true,\n      },\n      deaths: {\n        min: 0,\n        nice: true,\n        sync: true,\n      },\n    });\n    chart.tooltip({\n      showCrosshairs: true,\n      shared: true,\n    });\n    chart.line().position('reportDate*number').shape('smooth').color('type', (val) => {\n      if (val === 'total confirmed') {\n        return 'blue';\n      }\n\n      return 'red';\n    });\n\n    chart.render();\n  }, [dailyData, width, hasRendered, height]);\n\n  return (\n    <Measure\n      bounds\n      onResize={(contentRect) => {\n        if (contentRect.bounds) {\n          setWidth(contentRect.bounds.width);\n        }\n      }}\n    >\n      {({ measureRef }) => (\n        <div ref={measureRef} id={container} />\n      )}\n    </Measure>\n  );\n};\n\nexport default Trend;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"index_card__3q0KA\",\"confirmCard\":\"index_confirmCard__1Kd2e\",\"deathCard\":\"index_deathCard__XjF5t\",\"recoverdCard\":\"index_recoverdCard__3Ci_J\",\"activeCard\":\"index_activeCard__fd5wM\",\"trendCard\":\"index_trendCard__nHRj6\",\"charts\":\"index_charts__ZRMP0\",\"countryRow\":\"index_countryRow__MYxSX\"};","import React from 'react';\nimport { Chart } from '@antv/g2';\nimport Measure from 'react-measure';\nimport DataSet from '@antv/data-set';\nimport mapData from '../../countries.geo.json';\nimport { useConfirmData } from '../../hooks/data';\n\nconst container = 'world-trend-chart';\n\nconst WorldTrend: React.FC<{}> = () => {\n  const [width, setWidth] = React.useState<number>();\n  const [hasRendered, setHasRendered] = React.useState(false);\n  const { data: confirmedData } = useConfirmData();\n\n  React.useEffect(() => {\n    if (!confirmedData || !width || hasRendered) {\n      return;\n    }\n    const chart = new Chart({\n      container,\n      autoFit: true,\n      height: (width / 971) * 800,\n    });\n    setHasRendered(true);\n    // force sync scales\n    chart.scale({\n      x: { sync: true },\n      y: { sync: true },\n    });\n    chart.coordinate('rect').reflect('y');\n    chart.legend(false);\n    chart.axis(false);\n\n    // data set\n    const ds = new DataSet();\n\n    // draw the map\n    const dv = ds.createView('back')\n      .source(mapData, {\n        type: 'GeoJSON',\n      })\n      .transform({\n        type: 'geo.projection',\n        projection: 'geoMercator',\n        as: ['x', 'y', 'centroidX', 'centroidY'],\n      });\n    const bgView = chart.createView();\n    bgView.data(dv.rows);\n    bgView.tooltip(false);\n    bgView.polygon()\n      .position('x*y')\n      .style({\n        fill: '#DDDDDD',\n        stroke: '#b1b1b1',\n        lineWidth: 0.5,\n        fillOpacity: 0.85,\n      });\n\n    // draw the bubble plot\n    const userData = ds.createView().source(confirmedData);\n    userData.transform({\n      type: 'map',\n      callback: (obj) => {\n        const projectedCoord = dv.geoProjectPosition([obj.long * 1, obj.lat * 1], 'geoMercator');\n        // eslint-disable-next-line\n        obj.x = projectedCoord[0];\n        // eslint-disable-next-line\n        obj.y = projectedCoord[1];\n        // eslint-disable-next-line\n        obj.confirmed *= 1;\n        return obj;\n      },\n    });\n    const pointView = chart.createView();\n    pointView.data(userData.rows);\n    pointView.point()\n      .position('x*y')\n      .size('confirmed', [2, 30])\n      .shape('circle')\n      .color('#FF2F29')\n      .tooltip('combinedKey*confirmed')\n      .style({\n        fillOpacity: 0.45,\n      })\n      .state({\n        active: {\n          style: {\n            lineWidth: 1,\n            stroke: '#FF2F29',\n          },\n        },\n      });\n    pointView.interaction('element-active');\n\n    chart.render();\n  }, [confirmedData, width, hasRendered]);\n\n  return (\n    <Measure\n      bounds\n      onResize={(contentRect) => {\n        if (contentRect.bounds) {\n          setWidth(contentRect.bounds.width);\n        }\n      }}\n    >\n      {({ measureRef }) => (\n        <div ref={measureRef} id={container} />\n      )}\n    </Measure>\n\n  );\n};\n\nexport default WorldTrend;\n","import React from 'react';\nimport { CardPrimaryAction, Card } from '@rmwc/card';\nimport { GridCell, Grid, GridRow } from '@rmwc/grid';\nimport { Typography } from '@rmwc/typography';\nimport CountUp from 'react-countup';\nimport classnames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport styles from './index.module.css';\nimport Trend from '../../components/trend';\nimport WorldTrend from '../../components/world-trend';\nimport { useConfirmedDataByCountry, useDailyData, useOverallData } from '../../hooks/data';\n\nfunction getDeltaSign(delta: number) {\n  return delta >= 0 ? '+' : '-';\n}\n\n// function getActiveCase(data: any) {\n//   return data.confirmed.total - (data.recovered.total + data.deaths.total);\n// }\n\nconst Index: React.FC<{}> = () => {\n  const { data: recoveryData } = useOverallData();\n  const { data: dailyData } = useDailyData();\n  const { data: countryData } = useConfirmedDataByCountry();\n\n  const currentDateData = dailyData?.[dailyData?.length - 1];\n\n  const prevDateData = dailyData?.[dailyData?.length - 2];\n\n  // const activeDelta = getActiveCase(currentDateData) - getActiveCase(prevDateData);\n  const confirmedDelta = currentDateData.confirmed.total - prevDateData.confirmed.total;\n  const deathsDelta = currentDateData.deaths.total - prevDateData.deaths.total;\n  // const recoveredDelta = currentDateData.recovered.total - prevDateData.recovered.total;\n\n  return (\n    <Grid>\n      <GridRow>\n        <GridCell><Typography use=\"headline5\" tag=\"h3\">Global Trend</Typography></GridCell>\n      </GridRow>\n      <GridRow>\n        <GridCell phone={2} desktop={3}>\n          <Card className={classnames(styles.card, styles.activeCard)}>\n            <CardPrimaryAction>\n              <Typography use=\"subtitle2\">Active</Typography>\n              <Typography use=\"body1\">\n                <CountUp\n                  start={0}\n                  end={currentDateData.confirmed.total\n                    - (currentDateData.deaths.total + recoveryData.recovered.value)}\n                  duration={2.75}\n                  separator=\",\"\n                />\n              </Typography>\n            </CardPrimaryAction>\n          </Card>\n        </GridCell>\n        <GridCell phone={2} desktop={3}>\n          <Card className={classnames(styles.card, styles.confirmCard)}>\n            <CardPrimaryAction>\n              <Typography use=\"subtitle2\">Confirmed</Typography>\n              <Typography use=\"body1\">\n                <CountUp start={0} end={currentDateData.confirmed.total} duration={2.75} separator=\",\" />\n              </Typography>\n              <Typography use=\"caption\">\n                {getDeltaSign(confirmedDelta)}\n                <CountUp start={0} end={confirmedDelta} duration={2.75} separator=\",\" />\n              </Typography>\n            </CardPrimaryAction>\n          </Card>\n        </GridCell>\n        <GridCell phone={2} desktop={3}>\n          <Card className={classnames(styles.card, styles.deathCard)}>\n            <Typography use=\"subtitle2\">Death</Typography>\n            <Typography use=\"body1\">\n              <CountUp start={0} end={currentDateData.deaths.total} duration={2.75} separator=\",\" />\n            </Typography>\n            <Typography use=\"caption\">\n              {getDeltaSign(deathsDelta)}\n              <CountUp start={0} end={deathsDelta} duration={2.75} separator=\",\" />\n            </Typography>\n          </Card>\n        </GridCell>\n        <GridCell phone={2} desktop={3}>\n          <Card className={classnames(styles.card, styles.recoverdCard)}>\n            <Typography use=\"subtitle2\">Recovered</Typography>\n            <Typography use=\"body1\">\n              <CountUp start={0} end={recoveryData.recovered.value} duration={2.75} separator=\",\" />\n            </Typography>\n          </Card>\n        </GridCell>\n      </GridRow>\n      <GridRow className={styles.charts}>\n        <GridCell desktop={6}>\n          <Card className={styles.trendCard}>\n            <Trend />\n          </Card>\n        </GridCell>\n        <GridCell desktop={6}>\n          <Card className={styles.trendCard}>\n            <WorldTrend />\n          </Card>\n        </GridCell>\n      </GridRow>\n      <GridRow>\n        <GridCell><Typography use=\"headline5\" tag=\"h3\">Top Countries</Typography></GridCell>\n      </GridRow>\n      <GridRow>\n        {\n          countryData.slice(0, 9).map(({\n            country, confirmed, deaths, recovered, iso3, iso2,\n          }) => (\n            <GridCell span={2} key={country}>\n              <Card className={styles.card}>\n                <CardPrimaryAction>\n                  <Link to={`/countries/${iso3}`}>\n                    <Typography use=\"subtitle1\" className={styles.countryRow} tag=\"div\">\n                      <img src={`https://www.countryflags.io/${iso2}/flat/16.png`} alt={country} />\n                      {country}\n                    </Typography>\n                    <Typography use=\"body2\" tag=\"div\">\n                      <Typography use=\"caption\" tag=\"span\">\n                        confirmed:&nbsp;\n                      </Typography>\n                      <CountUp\n                        start={0}\n                        end={confirmed}\n                        duration={2.75}\n                        separator=\",\"\n                      />\n                    </Typography>\n                    <Typography use=\"body2\" tag=\"div\">\n                      <Typography use=\"caption\" tag=\"span\">\n                        deaths:&nbsp;\n                      </Typography>\n                      <CountUp\n                        start={0}\n                        end={deaths}\n                        duration={2.75}\n                        separator=\",\"\n                      />\n                    </Typography>\n                    <Typography use=\"body2\" tag=\"div\">\n                      <Typography use=\"caption\" tag=\"span\">\n                        recovered:&nbsp;\n                      </Typography>\n                      <CountUp\n                        start={0}\n                        end={recovered}\n                        duration={2.75}\n                        separator=\",\"\n                      />\n                    </Typography>\n                  </Link>\n                </CardPrimaryAction>\n              </Card>\n            </GridCell>\n          ))\n        }\n        <GridCell span={2}>\n          <Card className={styles.card}>\n            <CardPrimaryAction>\n              <Link to=\"/countries\">More...</Link>\n            </CardPrimaryAction>\n          </Card>\n        </GridCell>\n      </GridRow>\n    </Grid>\n  );\n};\n\nexport default Index;\n","const BASE_URL = 'https://covid19.mathdro.id';\nasync function fetcher(url: string) {\n  const res = await fetch(`${BASE_URL}${url}`, {\n    credentials: 'same-origin',\n  });\n\n  return res.json();\n}\n\nexport default fetcher;\n","import useSWR, { ConfigInterface } from 'swr';\nimport React from 'react';\nimport groupBy from 'lodash/groupBy';\nimport toPairs from 'lodash/toPairs';\nimport sum from 'lodash/sum';\nimport fetcher from '../utils/fetch';\n\nfunction useDailyData(config: ConfigInterface = {}) {\n  return useSWR('/api/daily', fetcher, { suspense: true, ...config });\n}\n\nfunction useOverallData(config: ConfigInterface = {}) {\n  return useSWR('/api', fetcher, { suspense: true, ...config });\n}\n\nfunction useConfirmData(config: ConfigInterface = {}) {\n  return useSWR('/api/confirmed', fetcher, { suspense: true, ...config });\n}\n\nfunction useConfirmedDataByCountry() {\n  const { data: confirmedData, ...rest } = useConfirmData();\n  const normalizedData = React.useMemo(() => {\n    if (!confirmedData) {\n      return [];\n    }\n\n    return toPairs(groupBy(confirmedData, 'countryRegion')).map(([country, list]) => {\n      const confirmed = sum(list.map((data) => data.confirmed));\n      const recovered = sum(list.map((data) => data.recovered));\n      const deaths = sum(list.map((data) => data.deaths));\n      const active = sum(list.map((data) => data.active));\n\n      return {\n        country,\n        list,\n        confirmed,\n        recovered,\n        deaths,\n        active,\n        iso3: list?.[0]?.iso3,\n        iso2: list?.[0]?.iso2,\n      };\n    });\n  }, [confirmedData]);\n\n  return {\n    data: normalizedData,\n    ...rest,\n  };\n}\n\nexport {\n  useConfirmedDataByCountry,\n  useDailyData,\n  useOverallData,\n  useConfirmData,\n};\n"],"sourceRoot":""}