{"version":3,"sources":["components/app/virus.svg","routes.ts","components/app/index.tsx","serviceWorker.ts","index.tsx","components/app/index.module.css"],"names":["module","exports","component","React","lazy","path","exact","App","title","to","className","styles","icon","src","alt","startContent","align","phone","link","safeArea","Suspense","fallback","spinnerWrapper","size","routes","map","props","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","process","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c58fce67.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/virus.4e113c7e.svg\";","import React from 'react';\n\nexport default [{\n  component: React.lazy(() => import('./pages/index')),\n  path: '/',\n  exact: true,\n}, {\n  component: React.lazy(() => import('./pages/countries')),\n  path: '/countries',\n  exact: true,\n}, {\n  component: React.lazy(() => import('./pages/country')),\n  path: '/countries/:country',\n  exact: true,\n}, {\n  component: React.lazy(() => import('./pages/daily-trend')),\n  path: '/daily-trend',\n  exact: true,\n}, {\n  component: React.lazy(() => import('./pages/daily-details')),\n  path: '/daily-trend/:date',\n  exact: true,\n}];\n","import React from 'react';\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Link,\n} from 'react-router-dom';\nimport { SimpleTopAppBar, TopAppBarFixedAdjust } from '@rmwc/top-app-bar';\nimport { GridCell, Grid, GridRow } from '@rmwc/grid';\nimport { CircularProgress } from '@rmwc/circular-progress';\nimport routes from '../../routes';\nimport icon from './virus.svg';\nimport styles from './index.module.css';\n\nimport 'normalize.css';\nimport './mdc';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <>\n        <SimpleTopAppBar\n          title={\n            (\n              <Link to=\"/\">\n                <img className={styles.icon} src={icon} alt=\"icon\" />\n              </Link>\n            ) as any\n          }\n          startContent={(\n            <Grid align=\"left\">\n              <GridRow>\n                <GridCell phone={2}><Link className={styles.link} to=\"/countries\">Countries</Link></GridCell>\n                <GridCell phone={2}><Link className={styles.link} to=\"/daily-trend\">Daily Trend</Link></GridCell>\n              </GridRow>\n            </Grid>\n          )}\n        />\n        <TopAppBarFixedAdjust />\n        <div className={styles.safeArea}>\n          <React.Suspense fallback={(\n            <div className={styles.spinnerWrapper}>\n              <CircularProgress size=\"large\" />\n            </div>\n          )}\n          >\n            <Switch>\n              {\n                routes.map((props) => (\n                  <Route key={props.path} path={props.path} exact={props.exact}>\n                    <props.component />\n                  </Route>\n                ))\n              }\n            </Switch>\n          </React.Suspense>\n        </div>\n      </>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n  // [::1] is the IPv6 localhost address.\n  || window.location.hostname === '[::1]'\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  || window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL || '',\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n            + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n/* eslint-enable */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport { register } from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n\nif (process.env.NODE_ENV === 'production') {\n  register();\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"app_icon__xQqbh\",\"safeArea\":\"app_safeArea__1Zq5S\",\"link\":\"app_link__ZBJeZ\",\"spinnerWrapper\":\"app_spinnerWrapper__1ZnbQ\"};"],"sourceRoot":""}